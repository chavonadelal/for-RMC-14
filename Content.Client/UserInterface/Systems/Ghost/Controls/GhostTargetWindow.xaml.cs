using System.Linq;
using System.Numerics;
using Content.Shared.Ghost;
using Content.Shared._RMC14.TacticalMap;
using Content.Shared.Damage;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Mobs.Systems;
using Content.Shared._RMC14.Marines;
using Content.Shared._RMC14.Xenonids;
using Content.Shared._RMC14.Survivor;
using Content.Shared.Follower;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using Robust.Client.Graphics;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared._RMC14.Marines.Squads;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    /// <remarks>
    /// RMC14 the whole window has been significantly changed.
    /// Preferably NOT accepting changes in merge conflicts from upstream.
    /// </remarks>
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        [Dependency] private readonly EntityManager _entityManager = default!;

        private static readonly Dictionary<string, int> NameCounters = new();

        private sealed class WarpGroup
        {
            public required LocId Title;
            public List<(string displayName, NetEntity Entity, bool IsWarpPoint, string? DisplayJob)> Warps = new();
            public Color HeaderColor = Color.FromHex("#696969");
            public bool IsExpandedByDefault = true;
            public List<WarpGroup>? Subgroups;
        }

        private List<WarpGroup> _warpGroups = new();
        private readonly Dictionary<Collapsible, WarpGroup> _collapsibleGroups = new();
        private string _searchText = string.Empty;

        public event Action<NetEntity>? WarpClicked;
        public event Action? OnGhostnadoClicked;

        public GhostTargetWindow()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;

            GhostnadoButton.OnPressed += _ => OnGhostnadoClicked?.Invoke();
        }

        public void UpdateWarps(IEnumerable<GhostWarp> warps)
        {
            _warpGroups.Clear();
            var mobState = _entityManager.System<MobStateSystem>();

            // Creating groups
            var marines = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-marines"), HeaderColor = Color.FromHex("#1c70b0") };
            var xenos = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-xenos"), HeaderColor = Color.FromHex("#472f4f") };
            var survivors = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-survivors"), HeaderColor = Color.FromHex("#4e9120") };
            var others = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-others") };
            var deads = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-deads"), IsExpandedByDefault = false };
            var ghosts = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-ghosts"), IsExpandedByDefault = false };
            var warpPoints = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-warp-points"), IsExpandedByDefault = false };

            foreach (var warp in warps)
            {
                var entry = (warp.DisplayName, warp.Entity, warp.IsWarpPoint, warp.DisplayJob);

                if (warp.IsWarpPoint)
                {
                    warpPoints.Warps.Add(entry);
                }
                else
                {
                    var entity = _entityManager.GetEntity(warp.Entity);
                    if (mobState.IsDead(entity))
                    {
                        deads.Warps.Add(entry);
                    }
                    else if (_entityManager.HasComponent<GhostComponent>(entity))
                    {
                        ghosts.Warps.Add((warp.DisplayName, warp.Entity, warp.IsWarpPoint, null));
                    }
                    else if (_entityManager.HasComponent<MarineComponent>(entity) && !_entityManager.HasComponent<RMCSurvivorComponent>(entity))
                    {
                        if (_entityManager.TryGetComponent<SquadMemberComponent>(entity, out var squadMember) &&
                            squadMember.Squad is { } squad)
                        {
                            if (marines.Subgroups == null)
                                marines.Subgroups = new List<WarpGroup>();

                            var squadName = _entityManager.GetComponent<MetaDataComponent>(squad).EntityName;
                            var squadGroup = marines.Subgroups.Find(g =>
                                Loc.GetString(g.Title) == squadName);

                            if (squadGroup == null)
                            {
                                // Создаем новую подгруппу для отряда
                                squadGroup = new WarpGroup
                                {
                                    Title = new LocId(squadName),
                                    HeaderColor = _entityManager.GetComponent<SquadTeamComponent>(squad).Color,
                                    IsExpandedByDefault = true
                                };
                                marines.Subgroups.Add(squadGroup);
                            }

                            squadGroup.Warps.Add(entry);
                        }
                        else
                        {
                            if (marines.Subgroups == null)
                                marines.Subgroups = new List<WarpGroup>();

                            var othersGroup = marines.Subgroups.Find(g =>
                                Loc.GetString(g.Title) == "rmc-ghost-target-window-group-others");

                            if (othersGroup == null)
                            {
                                // Создаем подгруппу "Остальные"
                                othersGroup = new WarpGroup { Title = new LocId("rmc-ghost-target-window-group-others") };
                                marines.Subgroups.Add(othersGroup);
                            }

                            othersGroup.Warps.Add(entry);
                        }
                    }
                    else if (_entityManager.HasComponent<XenoComponent>(entity))
                    {
                        xenos.Warps.Add(entry);
                    }
                    else if (_entityManager.HasComponent<RMCSurvivorComponent>(entity))
                    {
                        survivors.Warps.Add(entry);
                    }
                    else
                    {
                        others.Warps.Add(entry);
                    }
                }
            }

            // Sorting inside groups
            marines.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));
            xenos.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));
            others.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));
            survivors.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));
            deads.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));
            warpPoints.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));
            ghosts.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.CurrentCulture));

            // Adding groups in order of priority
            _warpGroups.Add(marines);
            _warpGroups.Add(xenos);
            _warpGroups.Add(survivors);
            _warpGroups.Add(others);
            _warpGroups.Add(deads);
            _warpGroups.Add(warpPoints);
            _warpGroups.Add(ghosts);
        }

        public void Populate()
        {
            ContentContainer.DisposeAllChildren();
            AddContent();
        }

        private void AddContent()
        {
            var spriteSystem = _entityManager.System<SpriteSystem>();
            var mobThreshold = _entityManager.System<MobThresholdSystem>();
            var mobState = _entityManager.System<MobStateSystem>();

            foreach (var group in _warpGroups)
            {
                if (group.Warps.Count == 0)
                    continue;

                var heading = CreateHeading(group, spriteSystem);
                var body = new CollapsibleBody { HorizontalExpand = true, Margin = new Thickness(0, 3, 0, 0) };
                var groupContainer = CreateGroupContainer(body);

                foreach (var (name, warpTarget, isWarpPoint, job) in group.Warps)
                {
                    var button = CreateWarpButton(name, warpTarget, isWarpPoint, job, spriteSystem, mobThreshold, mobState, group, ButtonIsVisible);
                    groupContainer.AddChild(button);
                }

                body.AddChild(groupContainer);
                var collapsible = CreateCollapsible(heading, body, group);

                ContentContainer.AddChild(collapsible);
                _collapsibleGroups[collapsible] = group;
            }
        }


        private CollapsibleHeading CreateHeading(WarpGroup group, SpriteSystem spriteSystem)
        {
            var heading = new CollapsibleHeading($"{Loc.GetString(group.Title)} — ({group.Warps.Count})");
            heading.StyleBoxOverride = new StyleBoxTexture
            {
                Texture = spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/Nano/rounded_button.svg.96dpi.png"))),
                Modulate = group.HeaderColor,
                PatchMarginTop = 5,
                PatchMarginBottom = 5,
                PatchMarginLeft = 5,
                PatchMarginRight = 5,
                ContentMarginTopOverride = 2,
                ContentMarginLeftOverride = 5,
                ContentMarginRightOverride = 5,
                ContentMarginBottomOverride = 2,
                Padding = new Thickness(2)
            };

            heading.OnMouseEntered += _ =>
            {
                if (heading.StyleBoxOverride is StyleBoxTexture styleBox)
                {
                    var c = styleBox.Modulate;
                    styleBox.Modulate = new Color(
                        Math.Min(c.R + 0.1f, 1.0f),
                        Math.Min(c.G + 0.1f, 1.0f),
                        Math.Min(c.B + 0.1f, 1.0f),
                        c.A
                    );
                }
            };

            heading.OnMouseExited += _ =>
            {
                if (heading.StyleBoxOverride is StyleBoxTexture styleBox)
                    styleBox.Modulate = group.HeaderColor;
            };

            return heading;
        }

        private GridContainer CreateGroupContainer(CollapsibleBody body)
        {
            var groupContainer = new GridContainer
            {
                HorizontalExpand = true,
                VerticalExpand = true
            };
            body.OnResized += () =>
            {
                if (body.Width > 0)
                    groupContainer.MaxGridWidth = body.Width;
            };
            return groupContainer;
        }

        private string GenerateUniqueButtonName(string baseName, string? job)
        {
            var name = job != null ? $"{baseName} {job}" : baseName;
            var uniqueName = name;

            if (!NameCounters.ContainsKey(name))
                NameCounters[name] = 0;

            while (ContentContainer.Children.OfType<Collapsible>()
                .SelectMany<Collapsible, GridContainer?>(c => c.GetChild(1) is CollapsibleBody body ? new[] { body.GetChild(0) as GridContainer } : Array.Empty<GridContainer?>())
                .Where(g => g != null)
                .SelectMany(g => g!.Children.OfType<Button>())
                .Any(b => b.Name == uniqueName))
            {
                NameCounters[name]++;
                uniqueName = $"{name} {NameCounters[name]}";
            }

            return uniqueName;
        }

        /// <summary>
        /// RMC14: Truncate text to a maximum length.
        /// </summary>
        private string TruncateText(string text, int maxLength)
        {
            return text.Length > maxLength ? text.Substring(0, maxLength) + "..." : text;
        }

        private Button CreateWarpButton(string name, NetEntity warpTarget, bool isWarpPoint, string? job,
            SpriteSystem spriteSystem, MobThresholdSystem mobThreshold, MobStateSystem mobState,
            WarpGroup group, Func<Button, bool> isVisibleCheck)
        {
            var buttonContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                HorizontalAlignment = Control.HAlignment.Center,
                VerticalAlignment = Control.VAlignment.Center,
                HorizontalExpand = true
            };

            float? healthPercent = null;
            if (!isWarpPoint)
                AddIconsToButtonContainer(buttonContainer, warpTarget, spriteSystem, mobThreshold, mobState, ref healthPercent);

            var label = new Label
            {
                Text = TruncateText(name, 15), // RMC14: This way we prevent the column from expanding too much, which will affect all the elements in the column.
                HorizontalAlignment = Control.HAlignment.Left,
                ClipText = false,
                Name = job != null ? $"{name} {job}" : name,
                StyleClasses = { "LabelSmall" }
            };
            buttonContainer.AddChild(label);

            if (!isWarpPoint)
                AddGhostCounter(buttonContainer, warpTarget);

            var button = new Button
            {
                Name = GenerateUniqueButtonName(name, job),
                StyleBoxOverride = new StyleBoxTexture
                {
                    Texture = spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/Nano/rounded_button.svg.96dpi.png"))),
                    PatchMarginTop = 5,
                    PatchMarginBottom = 5,
                    PatchMarginLeft = 5,
                    PatchMarginRight = 5,
                    ContentMarginTopOverride = 3,
                    ContentMarginLeftOverride = 6,
                    ContentMarginRightOverride = 6,
                    ContentMarginBottomOverride = 3,
                    Padding = new Thickness(2)
                }
            };

            if (!isWarpPoint)
                button.ToolTip = GetTooltip(warpTarget, name, job, mobState, healthPercent);

            button.AddChild(buttonContainer);
            button.OnPressed += _ => WarpClicked?.Invoke(warpTarget);
            button.Visible = isVisibleCheck(button);

            // Add effect when hovering
            button.OnMouseEntered += _ =>
            {
                if (button.StyleBoxOverride is StyleBoxTexture styleBox)
                {
                    var c = styleBox.Modulate;
                    styleBox.Modulate = new Color(
                        Math.Min(c.R + 0.1f, 1.0f),
                        Math.Min(c.G + 0.1f, 1.0f),
                        Math.Min(c.B + 0.1f, 1.0f),
                        c.A
                    );
                }
            };

            button.OnMouseExited += _ =>
            {
                if (button.StyleBoxOverride is StyleBoxTexture styleBox)
                {
                    styleBox.Modulate = Color.White;
                    // For some inexplicable reason, somewhere else, something is affecting this parameter
                    // so that the mixture of the specified white color becomes #464966 and any other specified color will be significantly darkened
                }
            };

            // Add effect when pressing
            button.OnButtonDown += _ =>
            {
                if (button.StyleBoxOverride is StyleBoxTexture styleBox)
                {
                    styleBox.Modulate = Color.FromHex("#3e6c45");
                }
            };

            button.OnButtonUp += _ =>
            {
                if (button.StyleBoxOverride is StyleBoxTexture styleBox)
                {
                    styleBox.Modulate = Color.White;
                }
            };

            return button;
        }

        private void AddIconsToButtonContainer(BoxContainer buttonContainer, NetEntity warpTarget, SpriteSystem spriteSystem,
            MobThresholdSystem mobThreshold, MobStateSystem mobState, ref float? healthPercent)
        {
            var entity = _entityManager.GetEntity(warpTarget);
            if (mobState.IsCritical(entity) || mobState.IsAlive(entity))
            {
                if (_entityManager.TryGetComponent<DamageableComponent>(entity, out var damageable) &&
                    _entityManager.TryGetComponent<MobThresholdsComponent>(entity, out var thresholds))
                {
                    if (mobThreshold.TryGetThresholdForState(entity, MobState.Dead, out var deadThreshold, thresholds))
                    {
                        var maxHealth = deadThreshold.Value;
                        var currentHealth = maxHealth - damageable.TotalDamage;
                        healthPercent = (currentHealth / maxHealth).Float() * 100f;
                        string healthState;
                        if (healthPercent >= 80f)
                            healthState = "health_high";
                        else if (healthPercent >= 40f)
                            healthState = "health_medium";
                        else
                            healthState = "health_low";

                        var healthIcon = new TextureRect
                        {
                            HorizontalAlignment = Control.HAlignment.Center,
                            VerticalAlignment = Control.VAlignment.Center,
                            Texture = spriteSystem.Frame0(
                                new SpriteSpecifier.Rsi(new ResPath("/Textures/_RMC14/Interface/health_hud.rsi"), healthState)),
                            Stretch = TextureRect.StretchMode.KeepAspectCentered,
                            MinSize = new Vector2(13, 13),
                            MaxSize = new Vector2(13, 13),
                            Margin = new Thickness(0, 0, 4, 0)
                        };
                        buttonContainer.AddChild(healthIcon);
                    }
                }
            }

            if (_entityManager.TryGetComponent<TacticalMapIconComponent>(entity, out var icon) && icon.Icon != null)
            {
                var iconPanel = new PanelContainer
                {
                    Margin = new Thickness(0, 0, 4, 0)
                };

                if (icon.Background != null)
                {
                    var backgroundView = new TextureRect
                    {
                        HorizontalAlignment = Control.HAlignment.Center,
                        VerticalAlignment = Control.VAlignment.Center,
                        Texture = spriteSystem.Frame0(icon.Background),
                        Stretch = TextureRect.StretchMode.KeepAspectCentered,
                        MinSize = new Vector2(16, 16),
                        MaxSize = new Vector2(16, 16)
                    };
                    iconPanel.AddChild(backgroundView);
                }

                var iconView = new TextureRect
                {
                    HorizontalAlignment = Control.HAlignment.Center,
                    VerticalAlignment = Control.VAlignment.Center,
                    Texture = spriteSystem.Frame0(icon.Icon),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    MinSize = new Vector2(16, 16),
                    MaxSize = new Vector2(16, 16)
                };
                iconPanel.AddChild(iconView);

                buttonContainer.AddChild(iconPanel);
            }
        }

        private void AddGhostCounter(BoxContainer buttonContainer, NetEntity warpTarget)
        {
            var followerSystem = _entityManager.System<FollowerSystem>();
            var entity = _entityManager.GetEntity(warpTarget);
            var followerCount = followerSystem.GetFollowerCount(entity);
            if (followerCount > 0)
            {
                var ghostCounter = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    HorizontalAlignment = Control.HAlignment.Right,
                    VerticalAlignment = Control.VAlignment.Center,
                };

                var ghostIcon = new TextureRect
                {
                    HorizontalAlignment = Control.HAlignment.Center,
                    VerticalAlignment = Control.VAlignment.Center,
                    Texture = _entityManager.System<SpriteSystem>().Frame0(
                        new SpriteSpecifier.Rsi(new ResPath("/Textures/Mobs/Ghosts/ghost_human.rsi"), "icon")),
                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                    MinSize = new Vector2(17, 17),
                    MaxSize = new Vector2(17, 17),
                };
                ghostCounter.AddChild(ghostIcon);

                var ghostCount = new Label
                {
                    Text = followerCount.ToString(),
                    HorizontalAlignment = Control.HAlignment.Center,
                    VerticalAlignment = Control.VAlignment.Center,
                    Margin = new Thickness(2, 0, 0, 0),
                    StyleClasses = { "LabelSmall" }
                };
                ghostCounter.AddChild(ghostCount);

                buttonContainer.AddChild(ghostCounter);
            }
        }

        private string GetTooltip(NetEntity warpTarget, string name, string? job, MobStateSystem mobState, float? healthPercent)
        {
            var entity = _entityManager.GetEntity(warpTarget);
            var tooltipText = $"{Loc.GetString("rmc-ghost-target-window-tooltip-name", ("name", name))}";
            if (job != null)
            {
                var isXeno = _entityManager.HasComponent<XenoComponent>(entity);
                tooltipText += isXeno
                    ? $"\n{Loc.GetString("rmc-ghost-target-window-tooltip-caste", ("caste", job))}"
                    : $"\n{Loc.GetString("rmc-ghost-target-window-tooltip-job", ("job", job))}";
            }
            if (!mobState.IsDead(entity) && healthPercent != null)
            {
                tooltipText += $"\n{Loc.GetString("rmc-ghost-target-window-tooltip-health", ("health", Math.Round(healthPercent.Value)))}";
            }

            return tooltipText;
        }

        private Collapsible CreateCollapsible(CollapsibleHeading heading, CollapsibleBody body, WarpGroup group)
        {
            var collapsible = new Collapsible(heading, body)
            {
                Margin = new Thickness(0, 4),
                HorizontalExpand = true
            };

            if (group.IsExpandedByDefault)
                collapsible.BodyVisible = true;

            return collapsible;
        }

        private bool ButtonIsVisible(Button button)
        {
            if (string.IsNullOrEmpty(_searchText))
                return true;

            return button.ChildrenContainText(_searchText) ||
                   (button.Name != null && button.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }

        private void UpdateVisibleButtons()
        {
            foreach (var collapsible in ContentContainer.Children.OfType<Collapsible>())
            {
                var body = collapsible.GetChild(1) as CollapsibleBody;
                if (body?.ChildCount != 1)
                    continue;

                var groupContainer = body.GetChild(0) as GridContainer;
                if (groupContainer == null)
                    continue;

                foreach (var button in groupContainer.Children.OfType<Button>())
                {
                    button.Visible = ButtonIsVisible(button);
                }
            }
        }

        private void UpdateVisibleCollapsibles()
        {
            foreach (var child in ContentContainer.Children)
            {
                if (child is Collapsible collapsible)
                {
                    var body = collapsible.GetChild(1) as CollapsibleBody;
                    var container = body?.GetChild(0) as GridContainer;
                    var hasVisibleButtons = container?.Children.OfType<Button>().Any(b => ButtonIsVisible(b)) ?? false;

                    collapsible.Visible = hasVisibleButtons;

                    if (_collapsibleGroups.TryGetValue(collapsible, out var group))
                    {
                        collapsible.BodyVisible = string.IsNullOrEmpty(_searchText)
                            ? group.IsExpandedByDefault
                            : hasVisibleButtons;
                    }
                }
            }
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            _searchText = args.Text;

            UpdateVisibleButtons();
            UpdateVisibleCollapsibles();
            // Reset scroll bar so they can see the relevant results.
            GhostScroll.SetScrollValue(Vector2.Zero);
        }
    }
}
