using System.Linq;
using System.Numerics;
using Content.Shared.Ghost;
using Content.Shared._RMC14.TacticalMap;
using Content.Shared.Damage;
using Content.Shared.FixedPoint;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Mobs.Systems;
using Content.Shared.Follower.Components;
using Content.Shared._RMC14.Marines;
using Content.Shared._RMC14.Xenonids;
using Content.Shared.Survivor.Components;
using Content.Shared.Follower;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.ResourceManagement;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Graphics;
using Robust.Shared.Utility;
using Robust.Client.Graphics;
using Robust.Shared.Graphics.RSI;
using Content.Client.UserInterface.ControlExtensions;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        [Dependency] private readonly EntityManager _entityManager = default!;

        private sealed class WarpGroup
        {
            public required string Title;
            public List<(string displayName, NetEntity Entity, bool IsWarpPoint, string? DisplayJob)> Warps = new();

            public bool IsExpandedByDefault = true;
        }

        private List<WarpGroup> _warpGroups = new();
        private readonly Dictionary<Collapsible, WarpGroup> _collapsibleGroups = new();
        private string _searchText = string.Empty;

        public event Action<NetEntity>? WarpClicked;
        public event Action? OnGhostnadoClicked;

        public GhostTargetWindow()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;

            GhostnadoButton.OnPressed += _ => OnGhostnadoClicked?.Invoke();
        }

        public void UpdateWarps(IEnumerable<GhostWarp> warps)
        {
            _warpGroups.Clear();

            // Создаем группы
            var marines = new WarpGroup { Title = Loc.GetString("rmc-ghost-target-window-group-marines") };
            var xenos = new WarpGroup { Title = Loc.GetString("rmc-ghost-target-window-group-xenos") };
            var others = new WarpGroup { Title = Loc.GetString("rmc-ghost-target-window-group-others") };
            var warpPoints = new WarpGroup { Title = Loc.GetString("rmc-ghost-target-window-group-warp-points"), IsExpandedByDefault = false };

            foreach (var warp in warps)
            {
                string displayName;
                if (warp.IsWarpPoint)
                {
                    displayName = Loc.GetString("ghost-target-window-current-button", ("name", warp.DisplayName));
                }
                else
                {
                    displayName = warp.DisplayName;
                }

                var entry = (displayName, warp.Entity, warp.IsWarpPoint, warp.DisplayJob);

                if (warp.IsWarpPoint)
                {
                    warpPoints.Warps.Add(entry);
                }
                else
                {
                    var entity = _entityManager.GetEntity(warp.Entity);
                    if (_entityManager.HasComponent<XenoComponent>(entity))
                    {
                        xenos.Warps.Add(entry);
                    }
                    else if (_entityManager.HasComponent<MarineComponent>(entity) && !_entityManager.HasComponent<SurvivorComponent>(entity))
                    {
                        marines.Warps.Add(entry);
                    }
                    else
                    {
                        others.Warps.Add(entry);
                    }
                }
            }

            // Сортируем внутри групп
            marines.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.Ordinal));
            xenos.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.Ordinal));
            others.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.Ordinal));
            warpPoints.Warps.Sort((a, b) => string.Compare(a.displayName, b.displayName, StringComparison.Ordinal));

            // Добавляем группы в порядке приоритета
            _warpGroups.Add(marines);
            _warpGroups.Add(xenos);
            _warpGroups.Add(others);
            _warpGroups.Add(warpPoints);
        }

        public void Populate()
        {
            ButtonContainer.DisposeAllChildren();
            AddButtons();
        }

        private void AddButtons()
        {
            var spriteSystem = _entityManager.System<SpriteSystem>();
            var mobThreshold = _entityManager.System<MobThresholdSystem>();
            var mobState = _entityManager.System<MobStateSystem>();

            foreach (var group in _warpGroups)
            {
                if (group.Warps.Count == 0)
                    continue;

                var heading = new CollapsibleHeading($"{Loc.GetString(group.Title)} — ({group.Warps.Count})");
                var body = new CollapsibleBody();

                var groupContainer = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical,
                    HorizontalExpand = true
                };

                foreach (var (name, warpTarget, isWarpPoint, job) in group.Warps)
                {
                    Logger.Debug($"Creating button: name={name}, isWarpPoint={isWarpPoint}, warpTarget={warpTarget}");

                    var buttonContainer = new BoxContainer
                    {
                        Orientation = BoxContainer.LayoutOrientation.Horizontal,
                        HorizontalAlignment = Control.HAlignment.Center,
                        VerticalAlignment = Control.VAlignment.Center,
                        HorizontalExpand = true,
                    };

                    Logger.Debug($"[GHOST] Created buttonContainer: {buttonContainer.GetType().Name}");

                    float? healthPercent = null;

                    if (!isWarpPoint)
                    {
                        var entity = _entityManager.GetEntity(warpTarget);
                        Logger.Debug($"Getting icon for entity {entity}");

                        // Adding a Health Icon
                        if (!mobState.IsDead(entity))
                        {
                            // Getting health percent
                            if (_entityManager.TryGetComponent<DamageableComponent>(entity, out var damageable) &&
                                _entityManager.TryGetComponent<MobThresholdsComponent>(entity, out var thresholds))
                            {
                                if (mobThreshold.TryGetThresholdForState(entity, MobState.Dead, out var deadThreshold, thresholds))
                                {
                                    var maxHealth = deadThreshold.Value;
                                    var currentHealth = maxHealth - damageable.TotalDamage;
                                    healthPercent = (currentHealth / maxHealth).Float() * 100f;

                                    string healthIconPath;
                                    if (healthPercent >= 80)
                                        healthIconPath = "/Textures/_RMC14/Interface/health_hud.rsi/health_high.png";
                                    else if (healthPercent >= 45)
                                        healthIconPath = "/Textures/_RMC14/Interface/health_hud.rsi/health_medium.png";
                                    else
                                        healthIconPath = "/Textures/_RMC14/Interface/health_hud.rsi/health_low.png";

                                    var healthIcon = new TextureRect
                                    {
                                        HorizontalAlignment = Control.HAlignment.Center,
                                        VerticalAlignment = Control.VAlignment.Center,
                                        Texture = spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath(healthIconPath))),
                                        Stretch = TextureRect.StretchMode.KeepAspectCentered,
                                        MinSize = new Vector2(14, 14),
                                        MaxSize = new Vector2(14, 14),
                                        Margin = new Thickness(0, 0, 4, 0)
                                    };
                                    buttonContainer.AddChild(healthIcon);
                                }
                            }
                        }

                        // Adding a Job Icon (if it exists)
                        if (_entityManager.TryGetComponent<TacticalMapIconComponent>(entity, out var icon) && icon.Icon != null)
                        {
                            Logger.Debug($"Found icon for entity {entity}");
                            var iconPanel = new PanelContainer
                            {
                                Margin = new Thickness(0, 0, 4, 0)
                            };

                            if (icon.Background != null)
                            {
                                var backgroundView = new TextureRect
                                {
                                    HorizontalAlignment = Control.HAlignment.Center,
                                    VerticalAlignment = Control.VAlignment.Center,
                                    Texture = spriteSystem.Frame0(icon.Background),
                                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                                    MinSize = new Vector2(17, 17),
                                    MaxSize = new Vector2(17, 17)
                                };
                                iconPanel.AddChild(backgroundView);
                            }

                            var iconView = new TextureRect
                            {
                                HorizontalAlignment = Control.HAlignment.Center,
                                VerticalAlignment = Control.VAlignment.Center,
                                Texture = spriteSystem.Frame0(icon.Icon),
                                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                                MinSize = new Vector2(17, 17),
                                MaxSize = new Vector2(17, 17)
                            };
                            iconPanel.AddChild(iconView);

                            buttonContainer.AddChild(iconPanel);
                            Logger.Debug($"[GHOST] Added icon panel to container");
                        }
                    }

                    var label = new Label
                    {
                        Text = name,
                        HorizontalAlignment = Control.HAlignment.Left,
                        ClipText = false,
                        Name = job != null ? $"{name} ({job})" : name // Saving full name for search
                    };
                    buttonContainer.AddChild(label);
                    Logger.Debug($"[GHOST] Added label to container: {label.Text}");

                    // Adding a ghost counter
                    if (!isWarpPoint)
                    {
                        var followerSystem = _entityManager.System<FollowerSystem>();
                        var entity = _entityManager.GetEntity(warpTarget);
                        var followerCount = followerSystem.GetFollowerCount(entity);
                        if (followerCount > 0)
                        {
                            var ghostCounter = new BoxContainer
                            {
                                Orientation = BoxContainer.LayoutOrientation.Horizontal,
                                HorizontalAlignment = Control.HAlignment.Right,
                                VerticalAlignment = Control.VAlignment.Center,
                                Margin = new Thickness(4, 0, 0, 0)
                            };

                            var ghostIcon = new TextureRect
                            {
                                HorizontalAlignment = Control.HAlignment.Center,
                                VerticalAlignment = Control.VAlignment.Center,
                                Texture = spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Mobs/Ghosts/ghost_human.rsi/icon.png"))),
                                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                                MinSize = new Vector2(17, 17),
                                MaxSize = new Vector2(17, 17),
                                Margin = new Thickness(0, 0, 4, 0)
                            };
                            ghostCounter.AddChild(ghostIcon);

                            var ghostCount = new Label
                            {
                                Text = followerCount.ToString(),
                                HorizontalAlignment = Control.HAlignment.Center,
                                VerticalAlignment = Control.VAlignment.Center
                            };
                            ghostCounter.AddChild(ghostCount);

                            buttonContainer.AddChild(ghostCounter);
                        }
                    }

                    var button = new Button
                    {
                        HorizontalExpand = true,
                        Name = job != null ? $"{name} ({job})" : name // Saving full name for search
                    };

                    // Adding a tooltip
                    if (!isWarpPoint)
                    {
                        var entity = _entityManager.GetEntity(warpTarget);
                        var tooltipText = $"{Loc.GetString("rmc-ghost-target-window-tooltip-name", ("name", name))}\n";
                        if (job != null)
                        {
                            // Checking if this is a xenomorph through the component
                            var isXeno = _entityManager.HasComponent<XenoComponent>(entity);
                            tooltipText += isXeno ? $"{Loc.GetString("rmc-ghost-target-window-tooltip-caste", ("caste", job))}" : $"{Loc.GetString("rmc-ghost-target-window-tooltip-job", ("job", job))}";
                        }
                        if (!mobState.IsDead(entity) && healthPercent != null)
                        {
                            tooltipText += $"\n{Loc.GetString("rmc-ghost-target-window-tooltip-health", ("health", Math.Round(healthPercent.Value)))}";
                        }
                        button.ToolTip = tooltipText;
                    }

                    Logger.Debug($"[GHOST] Created button, adding container");
                    button.AddChild(buttonContainer);
                    Logger.Debug($"[GHOST] Button children count: {button.ChildCount}");

                    button.OnPressed += _ => WarpClicked?.Invoke(warpTarget);
                    button.Visible = ButtonIsVisible(button);

                    groupContainer.AddChild(button);
                }

                body.AddChild(groupContainer);

                var collapsible = new Collapsible(heading, body)
                {
                    Margin = new Thickness(0, 4),
                    HorizontalExpand = true
                };

                // Открываем аккордеон для всех групп кроме варп-точек
                if (group.IsExpandedByDefault)
                    collapsible.BodyVisible = true;

                ButtonContainer.AddChild(collapsible);
                _collapsibleGroups[collapsible] = group;
            }
        }

        private bool ButtonIsVisible(Button button)
        {
            if (string.IsNullOrEmpty(_searchText))
                return true;

            Logger.Debug($"[GHOST] Search: text='{_searchText}'");
            return button.ChildrenContainText(_searchText) ||
                   (button.Name != null && button.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }

        private void UpdateVisibleButtons()
        {
            foreach (var collapsible in ButtonContainer.Children.OfType<Collapsible>())
            {
                var body = collapsible.GetChild(1) as CollapsibleBody;
                if (body?.ChildCount != 1)
                    continue;

                var groupContainer = body.GetChild(0) as BoxContainer;
                if (groupContainer == null)
                    continue;

                foreach (var button in groupContainer.Children.OfType<Button>())
                {
                    button.Visible = ButtonIsVisible(button);
                }
            }
        }


        private void UpdateVisibleCollapsibles()
        {
            foreach (var child in ButtonContainer.Children)
            {
                if (child is Collapsible collapsible)
                {
                    var body = collapsible.GetChild(1) as CollapsibleBody;
                    var container = body?.GetChild(0) as BoxContainer;
                    var hasVisibleButtons = container?.Children.OfType<Button>().Any(b => ButtonIsVisible(b)) ?? false;

                    collapsible.Visible = hasVisibleButtons;

                    if (_collapsibleGroups.TryGetValue(collapsible, out var group))
                    {
                        collapsible.BodyVisible = string.IsNullOrEmpty(_searchText)
                            ? group.IsExpandedByDefault
                            : hasVisibleButtons;
                    }
                }
            }
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            _searchText = args.Text;
            Logger.Debug($"[GHOST] Search text changed to: '{_searchText}'");

            UpdateVisibleButtons();
            UpdateVisibleCollapsibles();
            // Reset scroll bar so they can see the relevant results.
            GhostScroll.SetScrollValue(Vector2.Zero);
        }
    }
}
