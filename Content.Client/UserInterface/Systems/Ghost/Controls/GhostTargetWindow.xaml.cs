using System.Linq;
using System.Numerics;
using Content.Shared.Ghost;
using Content.Shared._RMC14.TacticalMap;
using Content.Shared.Damage;
using Content.Shared.FixedPoint;
using Content.Shared.Mobs;
using Content.Shared.Mobs.Components;
using Content.Shared.Mobs.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.ResourceManagement;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Graphics;
using Robust.Shared.Utility;
using Robust.Client.Graphics;
using Robust.Shared.Graphics.RSI;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared._RMC14.Xenonids;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        [Dependency] private readonly EntityManager _entityManager = default!;

        private List<(string displayName, NetEntity Entity, bool IsWarpPoint, string? DisplayJob)> _warps = new();
        private string _searchText = string.Empty;

        public event Action<NetEntity>? WarpClicked;
        public event Action? OnGhostnadoClicked;

        public GhostTargetWindow()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;

            GhostnadoButton.OnPressed += _ => OnGhostnadoClicked?.Invoke();
        }

        public void UpdateWarps(IEnumerable<GhostWarp> warps)
        {
            // Server COULD send these sorted but how about we just use the client to do it instead
            _warps = warps
                .OrderBy(w => w.IsWarpPoint)
                .ThenBy(w => w.DisplayName, Comparer<string>.Create(
                    (x, y) => string.Compare(x, y, StringComparison.Ordinal)))
                .Select(w =>
                {
                    string displayName;
                    if (w.IsWarpPoint)
                    {
                        displayName = Loc.GetString("ghost-target-window-current-button", ("name", w.DisplayName));
                    }
                    else
                    {
                        displayName = w.DisplayName;
                    }

                    Logger.Debug($"Warp: IsWarpPoint={w.IsWarpPoint}, DisplayName={w.DisplayName}, DisplayJob={w.DisplayJob}, Entity={w.Entity}");
                    return (displayName, w.Entity, w.IsWarpPoint, w.DisplayJob);
                })
                .ToList();
        }

        public void Populate()
        {
            ButtonContainer.DisposeAllChildren();
            AddButtons();
        }

        private void AddButtons()
        {
            var spriteSystem = _entityManager.System<SpriteSystem>();
            var mobThreshold = _entityManager.System<MobThresholdSystem>();
            var mobState = _entityManager.System<MobStateSystem>();

            foreach (var (name, warpTarget, isWarpPoint, job) in _warps)
            {
                Logger.Debug($"Creating button: name={name}, isWarpPoint={isWarpPoint}, warpTarget={warpTarget}");

                var buttonContainer = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    HorizontalAlignment = Control.HAlignment.Center,
                    VerticalAlignment = Control.VAlignment.Center,
                    HorizontalExpand = true,
                };

                Logger.Debug($"[GHOST] Created buttonContainer: {buttonContainer.GetType().Name}");

                float? healthPercent = null;

                if (!isWarpPoint)
                {
                    var entity = _entityManager.GetEntity(warpTarget);
                    Logger.Debug($"Getting icon for entity {entity}");

                    // Adding a Health Icon
                    if (!mobState.IsDead(entity))
                    {
                        // Getting health percent
                        if (_entityManager.TryGetComponent<DamageableComponent>(entity, out var damageable) &&
                            _entityManager.TryGetComponent<MobThresholdsComponent>(entity, out var thresholds))
                        {
                            if (mobThreshold.TryGetThresholdForState(entity, MobState.Dead, out var deadThreshold, thresholds))
                            {
                                var maxHealth = deadThreshold.Value;
                                var currentHealth = maxHealth - damageable.TotalDamage;
                                healthPercent = (currentHealth / maxHealth).Float() * 100f;

                                string healthIconPath;
                                if (healthPercent >= 80)
                                    healthIconPath = "/Textures/_RMC14/Interface/health_hud.rsi/health_high.png";
                                else if (healthPercent >= 45)
                                    healthIconPath = "/Textures/_RMC14/Interface/health_hud.rsi/health_medium.png";
                                else
                                    healthIconPath = "/Textures/_RMC14/Interface/health_hud.rsi/health_low.png";

                                var healthIcon = new TextureRect
                                {
                                    HorizontalAlignment = Control.HAlignment.Center,
                                    VerticalAlignment = Control.VAlignment.Center,
                                    Texture = spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath(healthIconPath))),
                                    Stretch = TextureRect.StretchMode.KeepAspectCentered,
                                    MinSize = new Vector2(14, 14),
                                    MaxSize = new Vector2(14, 14),
                                    Margin = new Thickness(0, 0, 4, 0)
                                };
                                buttonContainer.AddChild(healthIcon);
                            }
                        }
                    }

                    // Adding a Job Icon (if it exists)
                    if (_entityManager.TryGetComponent<TacticalMapIconComponent>(entity, out var icon) && icon.Icon != null)
                    {
                        Logger.Debug($"Found icon for entity {entity}");
                        var iconPanel = new PanelContainer
                        {
                            Margin = new Thickness(0, 0, 4, 0)
                        };

                        if (icon.Background != null)
                        {
                            var backgroundView = new TextureRect
                            {
                                HorizontalAlignment = Control.HAlignment.Center,
                                VerticalAlignment = Control.VAlignment.Center,
                                Texture = spriteSystem.Frame0(icon.Background),
                                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                                MinSize = new Vector2(17, 17),
                                MaxSize = new Vector2(17, 17)
                            };
                            iconPanel.AddChild(backgroundView);
                        }

                        var iconView = new TextureRect
                        {
                            HorizontalAlignment = Control.HAlignment.Center,
                            VerticalAlignment = Control.VAlignment.Center,
                            Texture = spriteSystem.Frame0(icon.Icon),
                            Stretch = TextureRect.StretchMode.KeepAspectCentered,
                            MinSize = new Vector2(17, 17),
                            MaxSize = new Vector2(17, 17)
                        };
                        iconPanel.AddChild(iconView);

                        buttonContainer.AddChild(iconPanel);
                        Logger.Debug($"[GHOST] Added icon panel to container");
                    }
                }

                var label = new Label
                {
                    Text = name,
                    HorizontalAlignment = Control.HAlignment.Left,
                    ClipText = false,
                    Name = job != null ? $"{name} ({job})" : name // Saving full name for search
                };
                buttonContainer.AddChild(label);
                Logger.Debug($"[GHOST] Added label to container: {label.Text}");

                var button = new Button
                {
                    HorizontalExpand = true,
                    Name = job != null ? $"{name} ({job})" : name // Saving full name for search
                };

                // Adding a tooltip
                if (!isWarpPoint)
                {
                    var entity = _entityManager.GetEntity(warpTarget);
                    var tooltipText = $"{Loc.GetString("rmc-ghost-target-window-tooltip-name", ("name", name))}\n";
                    if (job != null)
                    {
                        // Checking if this is a xenomorph through the component
                        var isXeno = _entityManager.HasComponent<XenoComponent>(entity);
                        tooltipText += isXeno ? $"{Loc.GetString("rmc-ghost-target-window-tooltip-caste", ("caste", job))}" : $"{Loc.GetString("rmc-ghost-target-window-tooltip-job", ("job", job))}";
                    }
                    if (!mobState.IsDead(entity) && healthPercent != null)
                    {
                        tooltipText += $"\n{Loc.GetString("rmc-ghost-target-window-tooltip-health", ("health", Math.Round(healthPercent.Value)))}";
                    }
                    button.ToolTip = tooltipText;
                }

                Logger.Debug($"[GHOST] Created button, adding container");
                button.AddChild(buttonContainer);
                Logger.Debug($"[GHOST] Button children count: {button.ChildCount}");

                button.OnPressed += _ => WarpClicked?.Invoke(warpTarget);
                button.Visible = ButtonIsVisible(button);

                ButtonContainer.AddChild(button);
            }
        }

        private bool ButtonIsVisible(Button button)
        {
            if (string.IsNullOrEmpty(_searchText))
                return true;

            Logger.Debug($"[GHOST] Search: text='{_searchText}'");
            return button.ChildrenContainText(_searchText) ||
                   (button.Name != null && button.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase));
        }

        private void UpdateVisibleButtons()
        {
            foreach (var child in ButtonContainer.Children)
            {
                if (child is Button button)
                    button.Visible = ButtonIsVisible(button);
            }
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            _searchText = args.Text;
            Logger.Debug($"[GHOST] Search text changed to: '{_searchText}'");

            UpdateVisibleButtons();
            // Reset scroll bar so they can see the relevant results.
            GhostScroll.SetScrollValue(Vector2.Zero);
        }
    }
}
